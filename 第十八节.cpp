#include<stdio.h>
int main()
{
     int a = 10;
	 int b = 20;
	 int c = b +a + 3;
	 return 0;
}








/*{
	char a = 3;
	//00000000000000000000000000000011
	//00000011――a   //char类型为1个字节
    char b = 127;
    //00000000000000000000000001111111
    //01111111――b
	//a和b如何相加
    //00000000000000000000000000000011――a
    //00000000000000000000000001111111――b
	//00000000000000000000000010000010――结果
	char c = a + b; 
    //10000010――C的补码
	//打印出来要是原码所以
	//11111111111111111111111110000010――符号位提升符号位为1――c的补码
    //11111111111111111111111110000001――减1操作
	//10000000000000000000000001111110――原码――结果-126
	printf("%d\n",c);
	return 0;
}
//整型提升
*/








/*
//学生
//int float
//创建一个结构体类型―struct  stu
struct stu
{
	//成员变量
  char name[20];
  int age;
  char id[20];

};
int main()
{
   int a = 10;
   //使用struct stu这个类型创建了一个学生对象，S1,并初始化
   struct stu s1 = {"张三",20,"2019010305"};
   struct stu* ps = &s1;
   //结构体指针->成员名
   printf("%s\n"s1.(*ps).name);
   printf("%s\n",ps->name);
   printf("%s\n"s1.name);
   printf("%s\n"s1.age);
   printf("%s\n"s1.id);
    
   //结构体变量.成员名
	return 0;
}

*/






/*int get(int x,int y)
{
    
	return x > y ? x : y;
}
int main()
{
    int a = 10;
	int b = 20;
    int max = get(a,b);
	printf("max = %d\n",max);
	return 0;
}
*/







/*{
    int a = 10;
	int b = 20;
	int max = 0;
    if(a > b)
	   max = a ;
    else
	   max = b;
   max = (a > b ? a : b);
	return 0;
}
*/







/*{
   int a = 0;
   int b = 0;
   if(a > 5)
	   b = 3;
   else
	   b = -3;
   b = (a > 5 ? 3 : -3);
	return 0;
}
*/








/*{
    int i = 0,a = 1,b = 2,c = 3,d = 4;
    i = a++ || ++b || d++;//左边为真剩余的就不用算了，a++非零就已经真了
    //

	printf("a = %d\n b = %d\n c = %d\n d = %d\n",a,b,c,d);
	return 0;
}
*/





/*{

    int i = 0,a = 1,b = 2,c = 3,d = 4;
     i = a++ && ++b && d++;
	printf("a = %d\n b = %d\n c = %d\n d = %d\n",a,b,c,d);
	return 0;
}
//结果2 3 3 5
*/




/*{
    int i = 0,a = 0,b = 2,c = 3,d = 4;
	i = a++ && ++b && d++;  //左边为假剩余的就不用算了，
    //i = a++ || ++b || d++;
	printf("a = %d\n b = %d\n c = %d\n d = %d\n",a,b,c,d);
	return 0;
}
*/








/*{
  int a = 0;
  int b = 5;
  int c = a && b;//同真则真
  int d = a || b;//同假则假
  printf("%d %d\n",c,d);  //1为真  0为假
  //逻辑与，或的判断非零则真；
  return 0;
}
*/


/*{
  int a =(int) 3.14;//强制类型转换
   


	return 0;
}
*/





/*{
    int a = 10;
	printf("%d\n",a++);//先使用 后++
	printf("%d\n",++a); //先++，后使用
	//先使用的意思是先打印出来再进行++操作
	return 0;
}
*/







/*{
   int a = 11;
   a = a & (~(1<<2));
   printf("%d\n",a);
	return 0;
}
//将11的二进制为低位第三位变为1  方法二
*/





/*{
  int a = 11;
	a = a | (1 << 2);
  //00000000000000000000000000001011
  //00000000000000000000000000000001
  //把1向左移动两位
  //00000000000000000000000000000100
  //1<<2
  printf("%d\n",a);
  return 0;
}/*
//将11的二进制为低位第三位变为1  方法一




/*{
  int a = 0;
  //~按（2进制）位取反
  //00000000000000000000000000000000 ――原数（计算机2进制存入的是补码）
  //11111111111111111111111111111111 ――按位取反结果（还是补码）
  //11111111111111111111111111111110  ―― 反码                            
  //00000000000000000000000000000001  ――打印出来的是原码
  //原码取反―反码―加1得到补码，补码减1―反码―取反得到原码 
  printf("%d\n",~a);

  return 0;
}
*/





/*{
	short s = 0;
	int a = 10;
	printf("%d\n",sizeof(s = a + 5));
	//short为短整型，两个字节，变量定义就为短整型，不论加和为多少最后sizeof计算都为短整型进行计算，2个字节
	printf("%d\n",s);	
	//输出的结果是0而不是15原因是，sizeof不进行运算，值不变，不是15 而继续为0；
	return 0;
}
*/